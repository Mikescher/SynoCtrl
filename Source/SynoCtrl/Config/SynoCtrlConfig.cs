using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Tommy;

namespace SynoCtrl.Config
{
	public class SynoCtrlConfig
	{
		public SingleDeviceConfig Default;
		public List<SingleDeviceConfig> Configs;

		public static SynoCtrlConfig Load(string filename)
		{
			string content;
			try
			{
				content = File.ReadAllText(filename);
			}
			catch (IOException e)
			{
				throw new SynoCtrlConfigParseException("Could not load file: " + e.Message);
			}

			return Parse(content);
		}

		public static SynoCtrlConfig Parse(string content)
		{
			using(var reader = new StringReader(content))
			{
				TomlTable data;

				try
				{
					data = TOML.Parse(reader);
				}
				catch (TomlParseException e)
				{
					throw new SynoCtrlConfigParseException("Error in Toml Syntax: " + e.Message);
				}

				string defaultName = null;
				List<SingleDeviceConfig> devices = new List<SingleDeviceConfig>();

				if (!data.HasKey("Default")) throw new SynoCtrlConfigParseException("Missing key [Default]");
				if (data["Default"] is TomlString s) defaultName = s; else throw new SynoCtrlConfigParseException("Key [Default] must be a string");

				if (data["Device"] is TomlArray a)
				{
					foreach (TomlNode n in a)
					{
						if (n is TomlTable t)
						{
							string cfgName = null;
							if (!t.HasKey("Name")) throw new SynoCtrlConfigParseException("Missing key [Name]");
							if (t["Name"] is TomlString vName) cfgName = vName;

							var cfg = new SingleDeviceConfig(cfgName, false);

							if (t.HasKey("IP")      ) { if (t["IP"]       is TomlString vIP)       cfg.IPAddress  = vIP.Value.Trim();       else throw new SynoCtrlConfigParseException("Key [IP] must be a string"); }
							if (t.HasKey("Mac")     ) { if (t["Mac"]      is TomlString vMac)      cfg.MacAddress = vMac.Value.Trim();      else throw new SynoCtrlConfigParseException("Key [Mac] must be a string"); }
							if (t.HasKey("Username")) { if (t["Username"] is TomlString vUsername) cfg.Username   = vUsername.Value.Trim(); else throw new SynoCtrlConfigParseException("Key [Username] must be a string"); }
							if (t.HasKey("Password")) { if (t["Password"] is TomlString vPassword) cfg.Password   = vPassword.Value.Trim(); else throw new SynoCtrlConfigParseException("Key [Password] must be a string"); }

							devices.Add(cfg);
						}
					}
				}

				var result = new SynoCtrlConfig { Configs = devices };
				if (defaultName != null)
				{
					result.Default = result.Configs.FirstOrDefault(c => string.Equals(c.Name, defaultName, StringComparison.CurrentCultureIgnoreCase));
					if (result.Default == null) throw new SynoCtrlConfigParseException($"Device '{defaultName}' not found");
				} 
				else
				{
					result.Default = new SingleDeviceConfig("%%AutoGenerated%%", true);
					result.Configs.Add(result.Default);
				}

				return result;
			}
		}

		public static SynoCtrlConfig CreateEmpty()
		{
			var result = new SynoCtrlConfig();
			result.Configs = new List<SingleDeviceConfig>();
			result.Default = new SingleDeviceConfig("%%AutoGenerated%%", true);
			result.Configs.Add(result.Default);
			return result;
		}
	}
}
