using System;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using SynoCtrl.Tasks;

namespace SynoCtrl.Config
{
	public class SingleDeviceConfig
	{
		private static readonly Regex REX_MAC_1 = new Regex(@"^[0-9A-Fa-f]{2}(:[0-9A-Fa-f]{2}){5}$", RegexOptions.Compiled);
		private static readonly Regex REX_MAC_2 = new Regex(@"^[0-9A-Fa-f]{2}(-[0-9A-Fa-f]{2}){5}$", RegexOptions.Compiled);
		private static readonly Regex REX_MAC_3 = new Regex(@"^([0-9A-Fa-f]{2}){6}$", RegexOptions.Compiled);

		private byte[] _macAddress = null;
		private IPAddress _ipAddress = null;

		public readonly string Name;
		public readonly bool AutoGenerated;

		public string Username;
		public string Password;
		
		public string IPAddress
		{
			get => _ipAddress?.ToString();
			set => _ipAddress = ParseIPAddress(value);
		}

		public string MacAddress
		{
			get => SCUtil.FormatByteArrayToHex(_macAddress, ":", -1, null, true);
			set => _macAddress = ConvertMacAddressAsByteArray(value);
		}

		public byte[] MacAddressRaw => _macAddress;
		public IPAddress IPAddressRaw => _ipAddress;

		public SingleDeviceConfig(string n, bool auto)
		{
			Name = n;
			AutoGenerated = auto;
		}

		private static IPAddress ParseIPAddress(string value)
		{
			if (System.Net.IPAddress.TryParse(value, out var result)) return result;
			
			throw new TaskException($"Not a valid IP address: '{value}'");
		}

		private static byte[] ConvertMacAddressAsByteArray(string addr)
		{
			if (string.IsNullOrWhiteSpace(addr)) return null;

			if (REX_MAC_1.IsMatch(addr)) return addr.Split(':').Select(p => Convert.ToByte(p, 16)).ToArray();
			if (REX_MAC_2.IsMatch(addr)) return addr.Split('-').Select(p => Convert.ToByte(p, 16)).ToArray();
			if (REX_MAC_3.IsMatch(addr)) return Enumerable.Range(0,6).Select(i => Convert.ToByte(addr.Substring(2*i, 2),16)).ToArray();

			throw new TaskException($"Not a valid MAC address: '{addr}'");
		}
	}
}
